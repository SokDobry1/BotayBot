54

/home/user/hello/dev/botaybot/2.1.2/main.py

------------------------------

try:
    import json
except:
    import pip
    pip.main(['install', 'json'])
    import json

try:
    import vk_api
except:
    import pip
    pip.main(['install', 'vk_api'])
    import vk_api

try:
    import vk
except:
    import pip
    pip.main(['install', 'vk'])
    import vk

from threading import Thread

from vk_api.longpoll import VkLongPoll, VkEventType
import message_handler
from vkapi import longpoll

def timer():
    import timer

if __name__ == '__main__':
    th_timer = Thread(target=timer)
    th_timer.start()
    while True:
        for event in longpoll.listen():
            #Если пришло новое сообщение
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    request = {"body": event.text,
                            "user_id": event.user_id}
                    try:
                        request.update({"payload": event.payload})
                    except:
                        pass
                    
                    message_handler.create_answer(request)











##############################

/home/user/hello/dev/botaybot/2.1.2/vkapi.py

------------------------------

try:
    import vk_api
except:
    import pip
    pip.main(['install', 'vk_api'])
    import vk_api

try:
    import vk
except:
    import pip
    pip.main(['install', 'vk'])
    import vk


import json
from settings import token
from vk_api.longpoll import VkLongPoll, VkEventType

vk_session = vk_api.VkApi(token = token)
longpoll = VkLongPoll(vk_session)

vk = vk_session.get_api()

def send_message(user_id, message, attachment, keyboard):
    try:
        if keyboard == '':
            vk.messages.send(
    			user_id = user_id,
    			random_id = vk_api.utils.get_random_id(),
    			message = message)
        else:
            vk.messages.send(
    			user_id = user_id,
    			message = message,
    			random_id = vk_api.utils.get_random_id(),
    			keyboard = keyboard)
    except:
        pass

def debug_message(message, keyboard=''):
    send_message(228179762, message, '', keyboard)

def get_full_user_info(user_id):
    return api.users.get(access_token=token, user_ids=str(user_id), name_case='Nom')[0]

def set_online_group(group_id=194144255):
    return api.groups.enableOnline(access_token=token, group_id=group_id)


if __name__ == "__main__":
    from commands.listCreator import *
    from commands import UseDataBase as db
    buttons = [
        [ ['Отмена', 'negative'] ],
    ]

    debug_message('В этот день нет предмета "Геометрия"\nВведи дату, когда дз будет актуально, в формате [День].[Месяц].[Год]\n(На следующий день в 3:00 по МСК дз будет удалено)', createButtons(buttons))































##############################

/home/user/hello/dev/botaybot/2.1.2/message_handler.py

------------------------------

import vkapi
import importlib
from commands import UseDataBase as db, template as temp
from commands.readJson import readJson as readJ
from commands.template import admin_id

pls_wait = False

def get_importer_line(path):
    importer = path[len(temp.path):].split(r'/')
    line = ''
    for i in importer:
        line += i + '.'
    return line



def get_answer(body, data, user_info):
    if user_info['vk_id'] in admin_id:
        if 'attachments' in data:
            att = data['attachments']
            ans = ''
            for i in att:
                ans += f"{i['type']}{i['photo']['owner_id']}_{i['photo']['id']}_{i['photo']['access_key']},"
            return(str(ans), ans[0:-1], '')

    if pls_wait and not user_info['vk_id'] in admin_id:
        return ('Бот отошел немного отдохнуть, возвращайтесь позже', '', readJ('main_buttons'))

    if data['body'].lower() == '!помоги':
        return db.go_main(user_info)

    message, keyboard, attachment = '', '', ''
    list_id = db.check_what_list(user_info)

    command_info = db.get_doubleWord_command(body.lower().split(' '), list_id)
    keyboard = readJ(command_info['jsonFile'])
    script_path = ''
    page = 1

    if user_info['name']: script_path, page = user_info['name'].split(';')
    elif command_info['script']: script_path = command_info['script']
    else: message, attachment = command_info['message'], command_info['attachment']

    if script_path: # Обработка скриптов
        line = get_importer_line(script_path)
        message, attachment, _keyboard= importlib.import_module(line[0:-4]).main(data, user_info, int(page))
        if _keyboard != '': keyboard = _keyboard
        else: keyboard = readJ('main_buttons.json')

    message = message.replace("!E!", "\n")
    return message, attachment, keyboard


def create_answer(data):
   user_id = data['user_id']
   user_info = db.check_user(user_id)

   data['body'] = data['body'].replace("\n", "!E!")

   message, attachment, keyboard = '', '', ''

   if user_id in admin_id:
       message, attachment, keyboard = get_answer(data['body'], data, user_info)
   else:
      try:
         message, attachment, keyboard = get_answer(data['body'], data, user_info)
      except:
         for i in admin_id:
            vkapi.send_message(i, f'У пользователя https://vk.com/gim194144255?sel={user_id} ошибка!\nБегом исправлять!\nВот его id: {user_id}', attachment, keyboard)
         message, attachment, keyboard = 'Произошла ошибка.\nЯ отправил в тех. поддержку уведомление.\nПопробуй ещё раз, если ничего не произошло - мы все исправим через некоторое время', '', readJ('main_buttons')

   vkapi.send_message(user_id, message, attachment, keyboard)













##############################

/home/user/hello/dev/botaybot/2.1.2/copy_db.py

------------------------------

from commands.UseDataBase import get, insert

data_trash = get('SELECT * FROM schedule;')
data = []
for i in range(len(data_trash)):
    data += [{'id_community': data_trash[i][1], 'description': data_trash[i][2], 'day_of_the_week': data_trash[i][3], 'week': data_trash[i][4]}]

insert("DELETE FROM day;")
insert("DELETE FROM week;")

for i in data:
    if len(get(f"SELECT id FROM week WHERE id_community = {i['id_community']};")) == 0:
        insert(f"INSERT INTO week (id_community, name) VALUES ({i['id_community']}, {str(i['week']) + ' неделя'!r});")
    id_week = get(f"SELECT id FROM week WHERE id_community = {i['id_community']};")[0][0]
    insert(f"INSERT INTO day (id_week, day_of_the_week, description) VALUES ({id_week}, {i['day_of_the_week']}, {i['description']!r});")
print('Ok')









##############################

/home/user/hello/dev/botaybot/2.1.2/timer.py

------------------------------

import datetime
from time import sleep
from commands import UseDataBase as db

hours_now = int(datetime.datetime.today().strftime("%H"))
minutes_now = int(datetime.datetime.today().strftime("%M"))
seconds_now = int(datetime.datetime.today().strftime("%S"))

day_now = int(datetime.datetime.today().strftime("%d"))
mounth_now = int(datetime.datetime.today().strftime("%m"))
year_now = int(datetime.datetime.today().strftime("%Y"))

def main(day_now, mounth_now, year_now):
    from vkapi import debug_message
    debug_message("OK")
    print(day_now)
    db.insert(f"DELETE FROM homework WHERE date < '{year_now}-{mounth_now}-{day_now}';")

main(day_now, mounth_now, year_now)

delta = 24 * 60 * 60 - (hours_now * 60 * 60 + minutes_now * 60 + seconds_now)
print(f'Засыпаю, проснусь через {delta // 60 // 60}:{delta // 60 % 60}:{delta % 60 % 60}')
sleep(delta)

while True:
    day_now = int(datetime.datetime.today().strftime("%d"))
    mounth_now = int(datetime.datetime.today().strftime("%m"))
    year_now = int(datetime.datetime.today().strftime("%Y"))
    main(day_now, mounth_now, year_now)
    print('Работа сделана, засыпаю...')
    sleep(24 * 60 * 60)











##############################

/home/user/hello/dev/botaybot/2.1.2/settings.py

------------------------------

token = 'd50cb0cef639eedc59f478d4809d0224577648d839de33ae987420c01648d152687d0843186e5cca5156c'
confirmation_token = '124b0629'













##############################

/home/user/hello/dev/botaybot/2.1.2/backup/read_backup.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3

import os

def get_path():
    path = os.path.abspath(__file__)
    for i in range(2):
        _pos = path.rfind("/")
        path = path[0:_pos]
    return path

main_path = get_path()
exceptions = ['./backup.txt']
read_only = [] #['/commands/authorized_admin/add_homework.py']

num, status = 0, 0

if len(read_only) > 0:
    exceptions = []

with open(f'{main_path}/backup/backup.txt', 'r', encoding='utf-8') as backup:
    files_count = int(backup.readline().strip()) - 1
    backup.readline()
    file_name = backup.readline().strip()
    while file_name != '1234567890end':
        method = 'w'
        if not os.path.exists(file_name):
            dir = file_name[0:file_name.rfind(r'/')]
            if not os.path.exists(dir):
                os.mkdir(dir)
            method = 'x'

        for i in range(3):
            backup.readline()

        text = ''
        line = backup.readline()
        while line.strip() != '#' * 30:
            text += line
            line = backup.readline()

        if not file_name in exceptions:
            if len(read_only) == 0 or file_name in read_only:
                with open(file_name, method, encoding='utf-8') as file:
                    file.write(text)

        backup.readline()
        file_name = backup.readline().strip()

        num += 1
        status_now = int(num / files_count * 10)
        if status_now != status:
            status = status_now
            print(str(status * 10) + '%')

print('OK')










##############################

/home/user/hello/dev/botaybot/2.1.2/backup/backup.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3

import os

def get_path():
    path = os.path.abspath(__file__)
    for i in range(2):
        _pos = path.rfind("/")
        path = path[0:_pos]
    return path

exceptions = ['./backup.txt', './commands/botay_database.sqlite']

main_path = get_path()
files_list = []
for address, dirs, files in os.walk(main_path):
    for file in filter(lambda x: x.endswith('.py') or x.endswith('.json'), files):
        file_name = os.path.join(address, file)
        if not file_name in exceptions:
            files_list += [file_name]

status = 0

with open(f'{main_path}/backup/backup.txt','w', encoding='utf-8') as backup:
    backup.write(f"{len(files_list)}\n\n")
    for x in range(len(files_list)):
        i = files_list[x]
        with open(i, 'r', encoding='utf-8') as file:
            backup.write(i + '\n\n' + '-' * 30 + '\n\n' + file.read() + '\n\n' + '#' * 30 + '\n\n')

        status_now = int(x / (len(files_list) - 1) * 10)
        if status_now != status:
            status = status_now
            print(str(status * 10) + '%')
    backup.write('1234567890end')

print('OK')













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/CodeChanger.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3

import os

exceptions = [f'./{i}' for i in os.listdir('./')]

files_list = []
for address, dirs, files in os.walk('./'):
    for file in filter(lambda x: x.endswith('.py'), files):
        file_name = os.path.join(address, file)
        if not file_name in exceptions:
            files_list += [file_name]

find_text = r"db.set_multiline_status("
replace_text = r"db.set_multiline_status( "

data = []
filesWithReplace = []

input('Ты точно хочешь это сделать?')

for i in files_list:
    do_replace = False
    with open(i,'r', encoding='utf-8') as file:
        line = file.readline()
        while line:
            if find_text in line:
                num = 1
                path = i.split(r'/')[1]
                if path == 'authorized_admin':
                    num = 3
                if path == 'authorized_user':
                    num = 2
                if path == 'not_authorized':
                    num = 1

                pos = line.find(find_text)
                line = line[0:pos] + replace_text + str(num) + ', ' + line[len(find_text) + pos:]
                do_replace = True
            data += [line]
            line = file.readline()

    if do_replace:
        filesWithReplace += [str(i)]

    with open(i,'w', encoding='utf-8') as file:
        for j in data:
            file.write(j)
    data = []

for i in filesWithReplace:
    print(i)
print('OK')













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/readJson.py

------------------------------

import json
from os.path import abspath

def readJson(name):
    if name[0:len('/home')] != '/home':
        if name[-5:] == '.json': name = name[0:-5]
        name = f"{abspath('./commands/jsons')}/{name}.json"
    with open(name) as f:
        return json.dumps(json.load(f))

def readJsonText(text):
    return json.dumps(json.loads(text))












##############################

/home/user/hello/dev/botaybot/2.1.2/commands/template.py

------------------------------

'''Содержит в себе кучу грамоздкого хлама,
который необходим файлам'''

import os

#CommandsCreator.py
python_file = """from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    return ('Ok','', '')"""

json_file = '''{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}'''

#UseDataBase.py
alfabet = []
for i in [[48,58],[65,91],[97,123]]:
    for j in range(i[0],i[1]):
        alfabet += [chr(j)]

#/not_authorized/create_community.py
def create_community_printer(name, user_pass, admin_pass):
    return f"""Группа под названием {name} создана успешно.
    Пароль user: {user_pass}
    Пароль admin: {admin_pass}"""

path = '/home/4LcHEM1ST/mysite/'
list_of_item = ['not_authorized','authorized_user','authorized_admin', 'not_ok_command']

#actually_homework_2.py
def actually_homework_text(text, date):
    return f"Вот текст домашнего задания:\n{text}\nНа день: {date}"

#schedule
days = ['Понедельник','Вторник','Среда','Четверг','Пятница','Суббота']

days_buttons = [
    [['Изменить название недели', 'primary', {'special': 'Изменить название недели'}]],
    [['Понедельник'],['Вторник']],
    [['Среда'],['Четверг']],
    [['Пятница'],['Суббота']],
    [['Назад', 'negative', {'special': 'Назад'}]],
    ]

#buttons
def gen_buttons(name, admin_panel=False):
    from commands.readJson import readJsonText as readJT
    if not admin_panel:
        texter = '''{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "''' + f'{name}' + '''"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}'''
    else:
        texter = '''{
  "one_time": true,
  "buttons": [
    [
        {
        "action": {
          "type": "text",
          "label": "Панель администратора"
        },
        "color": "primary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "''' + f'{name}' + '''"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}'''

    return readJT(texter)

#message_handler
admin_id = [228179762, 195823782]
helpers = []

if __name__ == "__main__":
    print('No errors')

















##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admintoken.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    return ('Ok','', '')



##############################

/home/user/hello/dev/botaybot/2.1.2/commands/UserChanger.py

------------------------------













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/payload.py

------------------------------

def payload_to_dict(data):
    text = '{"nodata": "None"}'
    if 'payload' in data:
        text = data['payload']
    prev_len = 0
    answer = dict()
    while True:
        s_key = text[prev_len:].find('"') + prev_len + 1
        if s_key > len(text): break
        e_key = text[s_key:].find('"') + s_key
        s_value = text[e_key + 1:].find('"') + (e_key + 1) + 1
        e_value = text[s_value:].find('"') + s_value
        prev_len += e_value + 2

        key, value = text[s_key:e_key], text[s_value:e_value]
        answer.update({key: value})
    return answer

#==========================================

def payload_to_str(dictionary):
    answer = r'{'
    for key, value in dictionary.items():
        answer += fr'\"{key}\": \"{value}\", '
    return answer[0:-2] + '}'

#=========================================

def get_element(data, name):
    ans = None
    payload = payload_to_dict(data)
    if name in payload:
        ans = payload[name]
    return ans









##############################

/home/user/hello/dev/botaybot/2.1.2/commands/listCreator.py

------------------------------

import json
from commands.payload import payload_to_str

def returnItem(text, color, dictionary={'nodata': None}):
    return '''        {
            "action": {
            "type": "text",
            "payload": "''' + payload_to_str(dictionary) + '''",
            "label": ''' + f'"{text}"' + '''
            },
            "color": ''' + f'"{color}"' + '''
        },'''

#---------------------------------------------------------------


def add_line(itemsList):
    ans = '''\n    ['''
    for item in itemsList:
        if not 'payload' in item:
            item.update({'payload': {'nodata': None}})
        ans += '\n' + returnItem(item['text'], item['color'], item['payload'])
    return ans[0:-1] + '\n    ],'

#========================================================



def createList(itemsList, page_num=1, end_button = ['Главная', 'positive']): # USE IT
    file = '''{\n   "one_time": true,\n
  "buttons": [
      '''
    back = '''
    [
        ''' + returnItem(end_button[0], end_button[1], {'special': end_button[0].lower()})[0:-1] + '''
    ]
   ]
}'''

    needNext = True
    needBack = False

    if len(itemsList) <= 6 * (page_num - 1) and page_num > 1:
        page_num -= 1

    if len(itemsList) <= 6 * page_num:
        needNext = False

    if page_num > 1: needBack = True
    while len(itemsList) < 6 * page_num:
        itemsList += ['(Пусто)']
    page_num -= 1

    for i in range(3):
        file += add_line([{'text': itemsList[i * 2 + 6 * page_num], 'color': 'secondary'}, {'text': itemsList[i * 2 + 1 + 6 * page_num], 'color': 'secondary'}])

    manage_buttons = []
    if needBack: manage_buttons += [{'text': '< < <', 'color': 'primary', 'payload': {'special': '< < <'}}]
    if needNext: manage_buttons += [{'text': '> > >', 'color': 'primary', 'payload': {'special': '> > >'}}]

    if len(manage_buttons) != 0:
        file += add_line(manage_buttons)

    return file + back


#========================================================



def createButtons(itemsList): # FORMAT: [
                              #          [[text, color, payload], [text, color], [text],],
                              #         ]

    file = '''{\n   "one_time": true,\n
  "buttons": [
      '''
    back = '''
   ]
}'''

    for itemsLine in itemsList:
        line = []
        for item in itemsLine: # '' = 'secondary'
            if len(item) == 1:
                item += ['secondary']
            if len(item) == 2:
                item += [{'data': None}]
            line += [{'text': item[0], 'color': item[1], 'payload': item[2]}]
        file += add_line(line)

    return json.dumps(json.loads(file[0:-1] + back))


#========================================================


def listHandler(data, user_info, db, list_of_items, text, end_button=['Главная', 'positive']):
    from commands.payload import payload_to_dict
    special = None
    if 'special' in payload_to_dict(data):
        special = payload_to_dict(data)['special']

    page = db.find_data_buffer(user_info['vk_id'])[1]
    if not page:
        page = 1

    if special == '> > >':
        if len(list_of_items) > 6 * page:
            page += 1
        db.set_data_buffer(user_info['vk_id'], page, '')
        return (text,'', createList(list_of_items, page, end_button))

    if special == '< < <':
        if page > 1:
            page -= 1
        db.set_data_buffer(user_info['vk_id'], page, '')
        return (text,'', createList(list_of_items, page, end_button))

    return False
















##############################

/home/user/hello/dev/botaybot/2.1.2/commands/UseDataBase.py

------------------------------

import random
import sqlite3
from os.path import abspath
try:
    from vkapi import debug_message
except:
    pass

non_authotized_community = 2

def get(request):
    con = sqlite3.connect(abspath('./commands/botay_database.sqlite'))
    cur = con.cursor()
    cur.execute(request)
    result = cur.fetchall()
    con.close()
    return result


def insert(request):
    con = sqlite3.connect(abspath('./commands/botay_database.sqlite'))
    cur = con.cursor()
    cur.execute(request)
    con.commit()
    con.close()

if __name__ == "__main__":
    print(get("SELECT * FROM users;"))


#==================================COMMUNITY BLOCK==================================



def password_generator(table_name, column_name): #  <====== Генератор паролей
    key = random.randint(10**8, 10**9)
    data_list = [1]

    while len(data_list) != 0:
        key = random.randint(10**8, 10**9)
        data_list = get('SELECT id FROM {t_name} WHERE {c_name} = {key};'.format(
        t_name = table_name, c_name = column_name, key = key))

    return key

#--------------------------------------------

def name_generator(table_name, column_name): # <============ Генератор имен
    from commands import template as temp, readJson as rJ
    def rand_name(_name, _alfabet):
        for i in range(10):
            _name += _alfabet[random.randint(0, len(_alfabet) - 1)]
        return _name

    alfabet = temp.alfabet

    name = ''
    data_list = [1]

    while len(data_list) != 0:
        name = rand_name('', alfabet)
        data_list = get('SELECT id FROM {t_name} WHERE {c_name} = {key!r};'.format(
        t_name = table_name, c_name = column_name, key = name))

    return name

#------------------------------------------

#USE IN CODE
def create_community(community_name=None): #  <====== Создание группы
    if community_name == None:
        community_name = name_generator('community','name')
    guest_key = password_generator('community', 'guest_key')
    key_for_admins = password_generator('community', 'key_for_admins')

    insert(f'INSERT INTO community (name, guest_key, key_for_admins) VALUES ({community_name!r},{guest_key},{key_for_admins});')

    return (community_name, guest_key, key_for_admins)


#------------------------------------------

def check_password(password): #  <====== Проверка пароля в базе (для проверки при регистрации)
    community_info = get(f'SELECT id FROM community WHERE guest_key = {password};')
    if len(community_info) != 0:
        return (community_info[0][0], 0)
    community_info = get(f'SELECT id FROM community WHERE key_for_admins = {password};') #проверка id, паролей
    if len(community_info) != 0:
        return (community_info[0][0], 1)
    return (False, False)

#------------------------------------------

def get_community_info(community_name=False, community_id=False): #  <====== Информация о группе
    info = get('SELECT * FROM community WHERE id = 1')
    if community_name:
        info = get('SELECT * FROM community WHERE name = {name!r};'.format(name = community_name))
    if community_id:
        info =  get('SELECT * FROM community WHERE id = {id};'.format(id = community_id))
    return {'id': info[0][0], 'name': info[0][1], 'guest_key': info[0][2],'key_for_admin': info[0][3]}

#------------------------------------------

#USE IN CODE
def check_what_list(user_info):  #  <====== В зависимости от информации пользователя возвращает его статус в базе
    if user_info['isAdmin']:
        return 3
    if user_info['id_community'] == non_authotized_community:
        return 1
    return 2


#-----------------------------------------

def delete_community(id_community):
    if len(get(f"SELECT * FROM users WHERE id_community = {id_community};")) == 0:
        items = get(f"SELECT id FROM list_of_item WHERE id_community = {id_community};")
        for i in items:
            insert(f"DELETE FROM homework WHERE id_item = {i[0]};")
            insert(f"DELETE FROM list_of_item WHERE id = {i[0]};")

        weeks = get(f"SELECT id FROM week WHERE id_community = {id_community};")
        for i in weeks:
            insert(f"DELETE FROM day WHERE id_week = {i[0]};")
            insert(f"DELETE FROM week WHERE id = {i[0]};")

        insert(f"DELETE FROM teacher WHERE id_community = {id_community};")
        insert(f"DELETE FROM community WHERE id = {id_community};")

#-----------------------------------------

def change_group_name(id_community, name):
    insert(f"UPDATE community SET name = {name!r} WHERE id = {id_community};")


#==================================USER BLOCK==================================




def create_user(user_id, community_id=1):  #  <====== Создание пользователя
    insert(f'INSERT INTO users (id_community, name, isAdmin, vk_id) VALUES ({community_id}, "", 0, {user_id});')

#---------------------------------------

#USE IN CODE
def check_user(user_id):  #  <====== Проверяет есть ли пользователь в базе и создает его если что
    user_info = get('SELECT * FROM users WHERE vk_id = {user_id};'.format(user_id = user_id))
    if len(user_info) == 0:
        create_user(user_id, non_authotized_community)
        user_info = get('SELECT * FROM users WHERE vk_id = {user_id};'.format(user_id = user_id))
    user_info = {'id' : user_info[0][0], 'id_community': user_info[0][1], 'name' : user_info[0][2], 'isAdmin' : user_info[0][3], 'vk_id' : user_info[0][4]}
    return  user_info

#------------------------------------------

#USE IN CODE
def change_group(user_id, password):  #  <====== Перемещает пользователя в группу если пароль совпадает
    try:
        password = int(password)
    except:
        return False

    group_status = check_password(password)
    if group_status[0]:
        insert('UPDATE users SET id_community = {g_id} WHERE vk_id = {vk_id};'.format(
        g_id = group_status[0], vk_id = user_id))

        insert('UPDATE users SET isAdmin = {u_stat} WHERE vk_id = {vk_id};'.format(
        u_stat = group_status[1], vk_id = user_id))
        return True
    return False




#==================================COMMANDS_BLOCK==================================



def create_command(list_id, message, attachment, script, jsonFile, keywords):  #  <====== Создает комманду (используется только внутри сервера)
    insert("INSERT INTO commands (mode, message, attachment, keyboard,script,jsonFile) VALUES (4, {0!r}, {1!r}, '', {2!r}, {3!r});".format(message, attachment, script, jsonFile))
    id_command = get('select id from commands where mode = 4;')[0][0]
    for i in keywords:
        insert(f"INSERT INTO keyword (id_command, name) values ({id_command},{i!r});")
    insert(f'update commands set mode = {list_id} where mode = 4;')
    return True

#------------------------------------------

#USE IN CODE
def get_command(body, status):  #  <====== Возвращает одну подходящую комманду по статусу, иначе стандартная
    command = get(f"SELECT * FROM commands WHERE id = 11;")[0]
    keywords = get(f"SELECT id_command FROM keyword WHERE name = {body!r};")
    for i in keywords:
        id_command = i[0]
        _command = get(f"SELECT * FROM commands WHERE id = {id_command};")[0]
        if status == _command[1]:
            command = _command
            break
        if status == 3 and _command[1] == 2:
            command = _command
    command = {'id': command[0], 'mode': command[1], 'message': command[2], 'attachment': command[3], 'keyboard': command[4], 'script': command[5], 'jsonFile': command[6]}
    return command

#-----------------------------------------------

def get_doubleWord_command(body, status):
    if len(body) == 1:
        return get_command(body[0], status)

    ans = get_command(body[0] + ' ' + body[1], status)
    if ans['id'] == 11:
        ans = get_command(body[0], status)
    return ans




#==================================MULTILINE_BLOCK==================================




def set_multiline_status(list_id, user_info, name):
    vk_id = user_info['vk_id']
    from commands import template as temp
    insert(f"UPDATE users SET name = '{temp.path + 'commands/' + temp.list_of_item[list_id - 1] + '/' + str(name).split(';')[0] + '.py' + ';' + str(name).split(';')[1]}' WHERE vk_id = {vk_id};")

#----------------------------------------------------------------------

def clear_multiline_status(vk_id):
    insert(f"UPDATE users SET name = '' WHERE vk_id = {vk_id};")

#----------------------------------------------------------------------

def set_data_buffer(num_1, num_2, text):
    insert(f"INSERT INTO data_buffer (num_1, num_2, text) VALUES ({num_1}, {num_2}, {text!r});")

#----------------------------------------------------------------------

def find_data_buffer(num_1=None, num_2=None, text=None):
    info = []
    if num_1 != None:
        info = get(f"SELECT * FROM data_buffer WHERE num_1 = {num_1}")
        if len(info) != 0:
            insert(f"DELETE FROM data_buffer WHERE num_1 = {num_1}")
    if num_2 != None:
        info = get(f"SELECT * FROM data_buffer WHERE num_2 = {num_2}")
        if len(info) != 0:
            insert(f"DELETE FROM data_buffer WHERE num_2 = {num_2}")
    if text != None:
        info = get(f"SELECT * FROM data_buffer WHERE text = {text!r}")
        if len(info) != 0:
            insert(f"DELETE FROM data_buffer WHERE text = {text!r}")
    info += ((False, False, False),)
    return info[0]

#----------------------------------------------------------------------


def go_main(user_info, page='main'):
    from commands.readJson import readJson as readJ
    user_id = user_info['vk_id']
    list_id = check_what_list(user_info)

    find_data_buffer(user_id)
    clear_multiline_status(user_id)

    if page == 'admin_panel':
        answer = get(f"SELECT * FROM commands WHERE id = 18;")[0]
        return (answer[2], answer[3], readJ(answer[6]))

    if page == 'main':
        answer = []
        if list_id == 1:
            answer = get(f"SELECT * FROM commands WHERE id = 13;")[0]
            return (answer[2], answer[3], readJ(answer[6]))
        elif list_id == 2:
            from commands.authorized_user.home import main as ans
            answer = ans({}, user_info)
        else:
            from commands.authorized_admin.admin_home import main as ans
            answer = ans({}, user_info)
        return answer



#==================================LIST OF ITEMS=============================




def create_item(name, user_info):
    if len(get(f"SELECT * FROM list_of_item WHERE id_community = {user_info['id_community']} and name = {name!r};")) != 0 :
        return 1
    if len(name)>= 40 :
        return 2
    insert(f"INSERT INTO list_of_item (id_community, name) VALUES ({user_info['id_community']}, {name!r});")
    return 0

#--------------------------------------------------------------------

def delete_item(name, user_info):
    item_info = get(f"SELECT * FROM list_of_item WHERE name = {name!r} and id_community = {user_info['id_community']};")
    if len(item_info) != 0:
        insert(f"DELETE FROM homework WHERE id_item = {item_info[0][0]};")
        insert(f"DELETE FROM list_of_item WHERE id = {item_info[0][0]};")
        return True
    return False

#--------------------------------------------------------------------

def get_items(user_info):
    ans = []
    list_of_items = get(f"SELECT id, name FROM list_of_item WHERE id_community = {user_info['id_community']};")
    for i in list_of_items:
        ans += [{'id': i[0], 'name': i[1]}]
    return ans

#-----------------------------------------------------------------

def get_item_info(item_name, user_info, item_id=None):
    if item_id == None:
        item_id = get(f"SELECT * FROM list_of_item WHERE name = {item_name!r} and id_community = {user_info['id_community']};")
    else:
        item_id= get(f"SELECT * FROM list_of_item WHERE id = {item_id};")
    if len(item_id) == 0:
        item_id = ((False, False, False),)
    return {'id': item_id[0][0], 'id_community': item_id[0][1], 'name': item_id[0][2]}




#==================================HOMEWORK==================================




def check_homework(item_name, user_info):
    item_id = get_item_info(item_name, user_info)
    if item_id['id'] == False:
        return (False, False)
    item_id = item_id['id']
    if len(get(f"SELECT * FROM homework WHERE id_item = {item_id};")) == 0:
        return (True, False)
    return (True, True)

#-------------------------------------------------------------------

def add_homework(item_id, text, date):
    insert(f"INSERT INTO homework (id_item, description, date) VALUES ({item_id}, {text!r}, {date!r});")

#-------------------------------------------------------------------

def delete_homework(item_name, user_info):
    status = check_homework(item_name, user_info)
    if status[1]:
        item_id = get_item_info(item_name, user_info)['id']
        insert(f"DELETE FROM homework WHERE id_item = {item_id};")
        return True
    return False

#-------------------------------------------------------------------

def get_info_homework(item_name, user_info):
    status = check_homework(item_name, user_info)
    if status[0]:
        if status[1]:
            item_id = get_item_info(item_name, user_info)['id']
            ans = get(f"SELECT description, date FROM homework WHERE id_item = {item_id};")[0]
            temp = ans[1].split(".")
            date = f"{temp[2]}.{temp[1]}.{temp[0]}"
            return {'text': ans[0], 'date': date}
        return {'text': False, 'date': False}

    return False




#==================================SCHEDULE==================================


def get_week_id(user_info, name):
    return get(f"SELECT id FROM week WHERE id_community = {user_info['id_community']} and name = {name!r};")[0][0]

#----------------------------------------------------------------

def add_week(user_info, name):
    weeks = get(f"SELECT name FROM week WHERE id_community = {user_info['id_community']};")
    weeks_copy = []
    for i in range(len(weeks)):
        weeks_copy += weeks[i]

    if len(weeks) >= 4:
        return -1
    if name in weeks_copy:
        return -2
    if len(name)>=40:
        return -3
    insert(f"INSERT INTO week (id_community, name) VALUES ({user_info['id_community']}, {name!r});")
    return 0

#----------------------------------------------------------------

def del_week(user_info, name):
    weeks = get(f"SELECT name FROM week WHERE id_community = {user_info['id_community']};")
    weeks_copy = []
    for i in range(len(weeks)):
        weeks_copy += weeks[i]

    if not name in weeks_copy:
        return -1
    id_week = get(f"SELECT id FROM week WHERE id_community = {user_info['id_community']} and name = {name!r};")[0][0]
    insert(f"DELETE FROM day WHERE id_week = {id_week};")
    insert(f"DELETE FROM week WHERE id_community = {user_info['id_community']} and name = {name!r};")
    return 0

#----------------------------------------------------------------

def check_what_day(name_day):
    from commands.template import days
    for i in range(len(days)):
        if name_day == days[i]:
            return i + 1
    return False

#----------------------------------------------------------------

def update_day(user_info, id_week, day_name, text):
    num_day = check_what_day(day_name)
    insert(f"DELETE FROM day WHERE id_week = {id_week} and day_of_the_week = {num_day};")
    insert(f"INSERT INTO day (id_week, description, day_of_the_week) VALUES ({id_week}, {text!r}, {num_day});")

#----------------------------------------------------------------

def get_day_info(week_id, name_day, user_info):
    num_day = check_what_day(name_day)
    info = get(f"SELECT description FROM day WHERE id_week = {week_id} and day_of_the_week = {num_day};")
    if len(info) != 0:
        return info[0][0]
    return False

#-----------------------------------------------------------------

def get_names_schedule(user_info):
    ans = []
    for i in get(f"SELECT name FROM week WHERE id_community = {user_info['id_community']};"):
        ans += [i[0]]
    return ans

#==================================TEACHERS==================================




def update_teachers(id_community, text):
    insert(f"DELETE FROM teacher WHERE id_community = {id_community};")
    insert(f"INSERT INTO teacher (id_community, description) VALUES ({id_community}, {text!r});")

def get_teachers_info(id_community):
    info = get(f"SELECT description FROM teacher WHERE id_community = {id_community};")
    if len(info) != 0:
        return info[0][0]
    return False

#==================================LIST_OF_USERS==================================





#==================================MAILING==================================

def send_users(user_info, message):
    from vkapi import send_message
    users = get(f"SELECT vk_id FROM users WHERE id_community = {user_info['id_community']};")
    for i in users:
        vk_id = int(i[0])
        if vk_id != user_info['vk_id']:
            send_message(vk_id, f'Пришла рассылка от https://vk.com/id{user_info["vk_id"]} для всех:', '', '')
            send_message(vk_id, message, '', '')

#----------------------------------------------------------------

def send_admins(user_info, message):
    from vkapi import send_message
    users = get(f"SELECT vk_id FROM users WHERE id_community = {user_info['id_community']} and isAdmin = 1;")
    for i in users:
        vk_id = int(i[0])
        if vk_id != user_info['vk_id']:
            send_message(vk_id, f'Пришла рассылка от https://vk.com/id{user_info["vk_id"]} для администраторов:', '', '')
            send_message(vk_id, message, '', '')














##############################

/home/user/hello/dev/botaybot/2.1.2/commands/CommandsChanger.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3

import UseDataBase as db

commands = db.get('SELECT id, script FROM commands;')
find_range = 4
print('Start...')

for id, script_name in commands:
    for j in range(1, find_range + 1):
        finder = f'_{j}'
        if finder in script_name:
            pos = script_name.find(finder)
            answer = script_name[0:pos] + script_name[pos + len(finder):]
            db.insert(f"UPDATE commands SET script = {answer!r} WHERE id = {id};")
            #print(script_name + '\nNew: ' + answer + '\n')
print('Ready')











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/CommandsCreator.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3
# -*- coding: utf-8 -*-

import UseDataBase as db
import os
import template as temp

os.system('clear')
l_names = ['not_authorized', 'authorized_user', 'authorized_admin']
print('-' * 30 + '\n\n1. not_authorized, 2. authorized_user, 3. authorized_admin\n')

list_name, list_num = 0, 0
while list_num not in [1, 2, 3]:
    try:
        list_num = int(input('Выбери для кого создаешь комманду: '))
    except:
        continue
list_name = l_names[list_num - 1]
print('Ok\n')



message = ""
line = input('Сообщение для вывода\n(если накосячил "1" и пиши заново):\n' )
while line:
    message += line + " \n"
    if line == '1':
        message = ""
    line = input()
print('Ok\n')

attachment = input('Attachment: ')
print('Ok\n')


template = os.path.abspath(__file__)
_pos = template.rfind("/")
if _pos == -1:
    _pos = template.rfind('\\')
template = os.path.join(template[0:_pos], list_name)
script = template + input('Имя скрипта(иначе пропусти): ') + '.py'
if script[len(template):] == '.py':
    script = ''
else:
    if not os.path.exists(script):
        with open(script, 'x') as file:
            file.write(temp.python_file)
print('Ok')



template = '/home/4LcHEM1ST/mysite/commands/jsons/'
jsonFile = template + input('Имя JSON файла(иначе пропусти): ') + '.json'
if jsonFile[len(template):] == '.json':
    jsonFile = template + 'main_buttons.json'
else:
    if not os.path.exists(jsonFile):
        with open(jsonFile, 'x') as file:
            file.write(temp.json_file)

print('Ok\n')



keywords = []
line = input('Слова-ключи, пиши с новой строки каждое\n(если накосячил "1" и пиши заново):\n ')
while line:
    keywords += [line]
    if line == '1':
        keywords = []
    line = input()


if db.create_command(list_num, message, attachment, script, jsonFile, keywords):
    print('Ready')
else:
    print('Error')











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/CodeChangerNew.py

------------------------------

#!/home/4LcHEM1ST/.local/bin/python3

import os

exceptions = [f'./{i}' for i in os.listdir('./')]

files_list = []
for address, dirs, files in os.walk('./'):
    for file in filter(lambda x: x.endswith('.py'), files):
        file_name = os.path.join(address, file)
        if not file_name in exceptions:
            files_list += [file_name]

find_text = r"db.set_multiline_status"
replace_text = r"(user_info, "

data = []
filesWithReplace = []

input('Ты точно хочешь это сделать?')

for i in files_list:
    do_replace = False
    with open(i,'r', encoding='utf-8') as file:
        line = file.readline()
        while line:
            if find_text in line:
                pos = line.find(find_text)
                prev = len(line[0:pos])
                start_replace = line[pos:].find('(') + prev
                end_replace = line[start_replace + 1:].find(')') + start_replace + 2

                start = line[pos:].find("'") + prev#
                end = line[start + 1:].find("'") + 2 + start #
                #line = line[0:pos] + replace_text + line[len(find_text) + pos:]
                line = line[0:pos] + find_text + replace_text + line[start:end] + ')' + line[end_replace:]
                do_replace = True
            data += [line]
            line = file.readline()

    if do_replace:
        filesWithReplace += [str(i)]

    with open(i,'w', encoding='utf-8') as file:
        for j in data:
            file.write(j)
    data = []

for i in filesWithReplace:
    print(i)
print('OK')













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/delete_item.py

------------------------------

from commands import UseDataBase as db
from commands.template import gen_buttons
from commands.listCreator import createList, listHandler
from commands.payload import get_element

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    list_of_items = []
    for i in db.get_items(user_info):
        list_of_items += [i['name']]
    db.set_multiline_status( 3, user_info, 'delete_item;2')

    return ('Выбери предмет, который хочешь удалить:','', createList(list_of_items, end_button=['Назад', 'negative']))

#=================================================================

def get_an_answer_2(data, user_info):
    special = get_element(data, 'special')
    if special == 'назад':
        return db.go_main(user_info, 'admin_panel')

    list_of_items = []
    for i in db.get_items(user_info):
        list_of_items += [i['name']]

    handler = listHandler(data, user_info, db, list_of_items,
    'Выбери предмет, который хочешь удалить:', end_button=['Назад', 'negative'])

    if handler != False:
        return handler

    db.clear_multiline_status(user_info['vk_id'] )

    text = "Предмет не существует"
    if db.delete_item(data['body'], user_info):
        text = "Предмет удален успешно"

    return (text,'', gen_buttons('Удалить предмет', True))










##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/update_teachers.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):
	message = ''
	attachment = ''
	keyboard = ''
	if page == 1:
		message, attachment, keyboard = get_an_answer_1(data,user_info)
	elif page == 2:
		message, attachment, keyboard = get_an_answer_2(data,user_info)
	return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
	add = ''
	db.set_multiline_status( 3, user_info, 'update_teachers;2')
	text = db.get_teachers_info(user_info['id_community'])
	if text != False:
		add += 'Нынешний текст:\n' + text + '\n\n'

	return (add + 'Введи текст, который будет появляться после нажатия кнопки "преподаватели":','', readJ('cancel'))
#=================================================================

def get_an_answer_2(data, user_info):
	if data['body'].lower() == 'отмена':
		return db.go_main(user_info, 'admin_panel')

	db.update_teachers(user_info['id_community'], data['body'])
	db.clear_multiline_status(user_info['vk_id'])
	return ('Текст обновлен успешно','', readJ('admin-main'))











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/add_item.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.payload import get_element
from commands.template import gen_buttons

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    text = '''Введи название предмета:
    (Подсказка: Ограничение на названия = 40 символов.
    Сокращайте названия. Например: "Программирование в алгоритмах" можно сократить в "Прогр-ие в алг."'''

    db.set_multiline_status( 3, user_info, 'add_item;2')
    return (text,'', readJ('cancel.json'))
#=================================================================

def get_an_answer_2(data, user_info):
    special = get_element(data, 'special')
    if special == 'отмена':
        return db.go_main(user_info, 'admin_panel')

    db.clear_multiline_status(user_info['vk_id'] )

    case = db.create_item(data['body'], user_info)

    if case == 0:
        text = "Предмет добавлен успешно"
    elif case==1:
        text = "Это имя занято"
    elif case==2:
        text = "Слишком длинное название (максимум 40 символов)"

    return (text,'', gen_buttons('Добавить предмет', True))









##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/admin_home.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):

	name_group = db.get_community_info(community_id = user_info['id_community'])['name'];

	return (f"Группа {name_group}\nВыбирай:",'', readJ('3_main_page.json'))













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/auto_sender_admin.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList, createButtons

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    elif page == 31:
        message, attachment, keyboard = get_an_answer_31(data,user_info)
    elif page == 32:
        message, attachment, keyboard = get_an_answer_32(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    keyboard = createButtons([
        [['Администраторам', 'primary'], ['Всем'],],
        [['Главная', 'positive'],]
    ])

    db.set_multiline_status( 3, user_info, 'auto_sender_admin;2')
    return ('Кому отправить рассылку?','', keyboard)

#=================================================================

def get_an_answer_2(data, user_info):
    body = data['body'].lower()
    if body == 'главная':
        return db.go_main(user_info)

    if body == 'администраторам':
        db.set_multiline_status(3, user_info, 'auto_sender_admin;31')

    if body == 'всем':
        db.set_multiline_status(3, user_info, 'auto_sender_admin;32')

    return ('Введи текст рассылки:','', readJ('cancel'))

#=================================================================

def get_an_answer_31(data, user_info):
    if data['body'].lower() != 'отмена':
        db.send_admins(user_info, data['body'])

    return db.go_main(user_info)

#=================================================================

def get_an_answer_32(data, user_info):
    if data['body'].lower() != 'отмена':
        db.send_users(user_info, data['body'])

    return db.go_main(user_info)











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/delete_homework.py

------------------------------

from commands import UseDataBase as db
from commands.listCreator import createList, listHandler
from commands.template import gen_buttons

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.find_data_buffer(user_info['vk_id'])
    db.set_multiline_status( 3, user_info, 'delete_homework;2')

    list_of_items = []
    for i in db.get_items(user_info):
        if db.check_homework(i['name'], user_info)[1]:
            list_of_items += [i['name']]

    return ('Выбери предмет по которому хочешь удалить дз:','', createList(list_of_items, end_button=['Назад', 'negative']))
#=================================================================

def get_an_answer_2(data, user_info):
    list_of_items = []
    for i in db.get_items(user_info):
        if db.check_homework(i['name'], user_info)[1]:
            list_of_items += [i['name']]

    if data['body'].lower() == 'назад':
        return db.go_main(user_info, 'admin_panel')

    if data['body'] in list_of_items:
        item = data['body']
        db.clear_multiline_status(user_info['vk_id'])
        if db.delete_homework(item, user_info):
            return ('Дз было успешно удалено','', gen_buttons('Удалить дз', True))
        return ('По этому предмету не было дз','', gen_buttons('Удалить дз', True))

    handler = listHandler(data, user_info, db, list_of_items,
    'Выбери предмет по которому хочешь удалить дз:', end_button=['Назад', 'negative'])

    if handler != False:
        return handler

    db.clear_multiline_status(user_info['vk_id'])
    return ('Такого предмета нет в списке','', gen_buttons('Удалить дз', True))













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/change_schedule.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList, createButtons
from commands.template import days, days_buttons, admin_id, gen_buttons
from commands.payload import get_element

def get_weeks(user_info):
    ans_buttons = []
    names = db.get_names_schedule(user_info)
    for i in range(len(names)):
        button_name = names[i]
        ans_buttons += [[[f'{button_name}'], ['Удалить', 'primary', {'button': button_name}]]]

    return ans_buttons + [
        [['Добавить неделю', 'primary', {'special': 'добавить неделю'}]],
        [['Назад', 'negative', {'special': 'назад'}]],
    ]

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    elif page == 3:
        message, attachment, keyboard = get_an_answer_3(data,user_info)
    elif page == 31:
        message, attachment, keyboard = get_an_answer_31(data,user_info)
    elif page == 4:
        message, attachment, keyboard = get_an_answer_4(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.set_multiline_status( 3, user_info, 'change_schedule;2')
    return ('Что делать с неделями?','', createButtons(get_weeks(user_info)))

#=================================================================

def get_an_answer_2(data, user_info):
    button, special = get_element(data, 'button'), get_element(data, 'special')
    names_schedule = db.get_names_schedule(user_info)

    if special == 'назад':
        return db.go_main(user_info, 'admin_panel')

    if special == 'добавить неделю':
        db.set_multiline_status( 3, user_info, 'change_schedule;31')
        return ('Введи название недели', '', readJ('cancel'))

    if button in names_schedule:
        db.clear_multiline_status(user_info['vk_id'])
        db.del_week(user_info, button)
        return (f'Неделя "{button}" была успешно удалена', '', gen_buttons('Изменить расписание', True))

    if data['body'] in names_schedule:
        db.set_data_buffer(user_info['vk_id'], db.get_week_id(user_info,data['body']), '')
        db.set_multiline_status( 3, user_info, 'change_schedule;3')
        return ('Выбери день недели', '', createList(days, end_button=['Назад','negative']))

    return ('Такой недели нет','', createList(days, end_button=['Назад','negative']))

#=================================================================

def get_an_answer_3(data, user_info):
    if data['body'].lower() == 'назад':
        db.find_data_buffer(user_info['vk_id'])
        return get_an_answer_1(data, user_info)

    if data['body'] in days:
        week_id = db.find_data_buffer(user_info['vk_id'])[1]
        db.set_multiline_status( 3, user_info, 'change_schedule;4')
        db.set_data_buffer(user_info['vk_id'], week_id, data['body'])
        text = db.get_day_info(week_id, data['body'], user_info)
        if text != False:
            return ('Вот нынешнее на этот день:\n' + text + '\n\nВведи текст нового расписания:', '', readJ('cancel'))
        return ('Расписания на этот день ещё не было\nВведи текст нового расписания:', '', readJ('cancel'))

    return ('Такого дня нету','', createList(days, end_button=['Назад','negative']))

#================================================================

def get_an_answer_31(data, user_info):
    if get_element(data, 'special') == 'отмена':
        return db.go_main(user_info, 'admin_panel')

    db.clear_multiline_status(user_info['vk_id'])
    answer = db.add_week(user_info, data['body'])
    text = 'Неделя добавлена успешно'
    if answer == -1:
        text = 'Достигнут лимит количества недель'
    elif answer == -2:
        text = 'Неделя с таким названием уже существует'
    elif answer == -3:
        text = 'Слишком длинное название (максимум 40 символов)'
    return(text, '', gen_buttons('Изменить расписание', True))

#=================================================================

def get_an_answer_4(data, user_info):
    if data['body'].lower() == 'отмена':
        return db.go_main(user_info, 'admin_panel')

    db.clear_multiline_status(user_info['vk_id'])
    trash, week_id, day = db.find_data_buffer(user_info['vk_id'])
    db.update_day(user_info, week_id, day, data['body'])
    db.find_data_buffer(user_info['vk_id'])

    return ('Расписание обновлено успешно','', gen_buttons('Изменить расписание', True))












##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/rename_group.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):
	message = ''
	attachment = ''
	keyboard = ''
	if page == 1:
		message, attachment, keyboard = get_an_answer_1(data,user_info)
	elif page == 2:
		message, attachment, keyboard = get_an_answer_2(data,user_info)
	return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
	db.find_data_buffer(user_info['vk_id'])
	db.set_multiline_status( 3, user_info, 'rename_group;2')

	return ('Введите название группы:','', readJ('cancel.json'))
#=================================================================

def get_an_answer_2(data, user_info):
	db.clear_multiline_status(user_info['vk_id'])

	if data['body'].lower() == 'отмена':
		return db.go_main(user_info, 'admin_panel')

	db.change_group_name(user_info['id_community'], data['body']);

	return ('Название изменено успешно','', readJ('admin-main'))












##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/token.py

------------------------------

from commands import UseDataBase as db
from vkapi import send_message
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''

    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    return message, attachment, keyboard

def get_an_answer_1(data,user_info):
    info = db.get_community_info(community_id=user_info["id_community"])
    send_message(user_info["vk_id"], 
                 f"Токен администратора:\n{info['key_for_admin']}", '', '')
                 
    send_message(user_info["vk_id"], 
                 f"Токен пользователя:\n{info['guest_key']}", '', readJ("3_admin_panel"))

    return("", "", "")







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_admin/add_homework.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList, listHandler
from commands.template import gen_buttons, admin_id
from commands.payload import get_element

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''

    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    elif page == 3:
        message, attachment, keyboard = get_an_answer_3(data,user_info)
    elif page == 4:
        message, attachment, keyboard = get_an_answer_4(data,user_info)
    elif page == 5:
        message, attachment, keyboard = get_an_answer_5(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.find_data_buffer(user_info['vk_id'])
    db.set_multiline_status( 3, user_info, 'add_homework;2')

    list_of_items = []
    for i in db.get_items(user_info):
        list_of_items += [i['name']]

    return ('Выбери предмет по которому хочешь добавить дз:','', createList(list_of_items, end_button=['Назад', 'negative']))

#=================================================================

def get_an_answer_2(data, user_info):
    special = get_element(data, 'special')
    if special == 'назад':
        return db.go_main(user_info, 'admin_panel')

    list_of_items = []
    for i in db.get_items(user_info):
        list_of_items += [i['name']]

    if data['body'] in list_of_items:
        db.set_multiline_status( 3, user_info, 'add_homework;3')
        db.find_data_buffer(user_info['vk_id'])
        db.set_data_buffer(user_info['vk_id'], 0, data['body'])
        if not db.check_homework(i['name'], user_info)[1]:
            return('Введи текст домашнего задания:', '', readJ('cancel'))
        else:
            return("По этому предмету есть дз.\nУдалить?",'', readJ('yes_no'))

    handler = listHandler(data, user_info, db, list_of_items,
    'Выбери предмет по которому хочешь добавить дз:', end_button=['Назад', 'negative'])

    if handler != False:
        return handler

    db.clear_multiline_status(user_info['vk_id'])
    return ('Такого предмета нет в списке','', gen_buttons('Добавить дз', True))

#=================================================================

def get_an_answer_3(data, user_info):
    special = get_element(data, 'special')
    if special == "нет":
        return get_an_answer_1(data, user_info)
    if special == "да":
        item = db.find_data_buffer(user_info["vk_id"])[2]
        data["body"] = item
        db.delete_homework(item, user_info)
        return get_an_answer_2(data, user_info)

    if special == 'отмена':
        return get_an_answer_1(data, user_info)

    item = db.find_data_buffer(user_info['vk_id'])[2]
    db.set_data_buffer(user_info['vk_id'], db.get_item_info(item, user_info)['id'], data['body'])

    db.set_multiline_status( 3, user_info, 'add_homework;4')
    return ('''Введи дату, когда дз будет актуально, в формате [День].[Месяц].[Год]
    (На следующий день в 3:00 по МСК дз будет удалено)''','', readJ('cancel.json'))

#=================================================================

def get_an_answer_4(data, user_info):
    import datetime
    special = get_element(data, 'special')
    if special == 'отмена':
        return db.go_main(user_info, 'admin_panel')

    day = []
    go_back = False

    try:
        day = data['body'].split('.')
        now_day = datetime.datetime.today().strftime("%d.%m.%Y").split('.')

        if len(day) != 3:
            f = int('for_except')

        for i in range(3):
            day[i] = int(day[i])
            now_day[i] = int(now_day[i])

        if day[0] <= now_day[0]:
            if day[1] <= now_day[1]:
                if day[2] <= now_day[2]:
                    f = int('for_except')

        if day[1] < now_day[1]:
            if day[2] <= now_day[2]:
                f = int('for_except')

        if day[2] < now_day[2]:
            f = int('for_except')

        datetime.date(day[2], day[1], day[0])
    except:
        go_back = True

    if go_back:
        db.set_multiline_status( 3, user_info, 'add_homework;4')
        return('''Неверная дата. Введите дату на  в формате [День].[Месяц].[Год]
    (На следующий день в 3:00 по МСК дз будет удалено))''', '',  readJ('cancel'))

    else:
        vk_id, id_item, text_dz = db.find_data_buffer(user_info['vk_id'])

        if vk_id == False:
            db.clear_multiline_status(user_info['vk_id'])
            return ('Ошибка, повторите запрос','', gen_buttons('Добавить дз', True))

        db.set_multiline_status( 3, user_info, 'add_homework;5')
        db.add_homework(id_item, text_dz, f"{day[2]}.{day[1]}.{day[0]}")
        item_name = db.get_item_info('', user_info, id_item)['name']
        db.set_data_buffer(user_info['vk_id'], 0, item_name)
        return ('Дз было добавлено успешно\nОповестить участников группы?','', readJ('yes_no'))

#=======================================================================

def get_an_answer_5(data, user_info):
    special = get_element(data, 'special')
    item_name = db.find_data_buffer(user_info['vk_id'])[2]
    if special == 'да':
        db.send_users(user_info, f'Добавлено домашнее задание по предмету "{item_name}"')

    db.clear_multiline_status(user_info['vk_id'])
    return('Готово', '', gen_buttons('Добавить дз', True))























##############################

/home/user/hello/dev/botaybot/2.1.2/commands/not_authorized/connect_community.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.template import gen_buttons

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.set_multiline_status( 1, user_info, 'connect_community;2')
    return ('Введите токен группы:','', readJ('cancel.json'))

#=================================================================

def get_an_answer_2(data, user_info):
    if data['body'].lower() == 'отмена':
        return db.go_main(user_info)

    status = db.change_group(data['user_id'], data['body'])
    db.clear_multiline_status(data['user_id'])

    if status:
        return ("Вы успешно вошли в группу",'', '')

    return ("Неправильный токен группы",'', gen_buttons('Присоединиться'))











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/not_authorized/create_community.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands import template as temp
from commands.payload import get_element

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return (message, attachment, keyboard)


def get_an_answer_1(data, user_info):
    db.set_multiline_status( 1, user_info, 'create_community;2')
    return ("Введите название группы", '', readJ("cancel"))

def get_an_answer_2(data, user_info):
    special = get_element(data, 'special')
    db.clear_multiline_status(user_info['vk_id'] )
    if special == "отмена":
        db.go_main(user_info)

    if (len(data['body']) > 40): data['body'] = data['body'][0:41]
    community_name, guest_key, admin_key = db.create_community(data['body'])
    db.change_group(user_info['vk_id'], admin_key)

    return (temp.create_community_printer(community_name, guest_key, admin_key),'', '')













##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/teacher.py

------------------------------

from commands import UseDataBase as db

def main(data, user_info, page=1):
    text = db.get_teachers_info(user_info['id_community'])
    if text != False:
        return ('Вот ваши преподаватели:\n' + text,'', '')
    return ('Список преподавателей ещё не был заполнен.\nПопросите администратора вашей группы заняться этим','', '')











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/exit.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.set_multiline_status( 2, user_info, 'exit;2')
    text = ''
    if len(db.get(f"SELECT * FROM users WHERE id_community = {user_info['id_community']};")) == 1:
        text = '\nВ группе больше нет людей, она будет удалена'
    return ('Ты уверен(а)?' + text,'', readJ('yes_no'))

#=================================================================

def get_an_answer_2(data, user_info):
    if data['body'].lower() != 'да':
        return db.go_main(user_info)

    id_community = user_info['id_community']

    db.clear_multiline_status(data['user_id'])
    db.change_group(data['user_id'], 12344325)

    db.delete_community(id_community)

    return ('Вы успешно вышли из группы','', readJ('main_buttons'))











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/auto_sender_user.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):

    return (f"В разработке...",'', readJ('/home/4LcHEM1ST/mysite/commands/jsons/main_buttons.json'))














##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/actually_homework.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ
from commands.listCreator import createList, listHandler

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    db.find_data_buffer(user_info['vk_id'])
    db.set_multiline_status( 2, user_info, 'actually_homework;2')

    list_of_items = []
    for i in db.get_items(user_info):
        if db.check_homework(i['name'], user_info)[1]:
            list_of_items += [i['name']]

    return ('Выбери предмет по которому хочешь получить дз:','', createList(list_of_items))

#=================================================================

def get_an_answer_2(data, user_info):
    from commands.template import actually_homework_text as text_dz

    list_of_items = []
    for i in db.get_items(user_info):
        if db.check_homework(i['name'], user_info)[1]:
            list_of_items += [i['name']]

    if data['body'].lower() == 'главная':
        return db.go_main(user_info)

    if db.check_homework(data['body'], user_info)[0]:
        item = data['body']
        db.set_multiline_status( 2, user_info, 'actually_homework;2')
        info_dz = db.get_info_homework(item, user_info)

        text = None
        if info_dz['text'] != False:
            text = text_dz(info_dz['text'], info_dz['date'])
        else: text = 'По этому предмету нет дз'
        return(text, '', createList(list_of_items))

    handler = listHandler(data, user_info, db, list_of_items,
    'Выбери предмет по которому хочешь получить дз:')

    if handler != False:
        return handler

    return ('Такого предмета нет в списке','', '')











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/home.py

------------------------------

from commands import UseDataBase as db
from commands.readJson import readJson as readJ

def main(data, user_info, page=1):

    name_group = db.get_community_info(community_id = user_info['id_community'])['name'];

    return (f"Группа {name_group}\n Выбирай:",'', readJ('helpbuttons'))














##############################

/home/user/hello/dev/botaybot/2.1.2/commands/authorized_user/schedule.py

------------------------------

from commands import UseDataBase as db
from commands.listCreator import createList, createButtons
from commands.template import days
from commands.payload import get_element

def get_weeks(user_info):
    ans_buttons = []
    names = db.get_names_schedule(user_info)
    for i in range(len(names)):
        button_name = names[i]
        ans_buttons += [[[f'{button_name}', 'primary']]]

    return ans_buttons + [
        [['Главная', 'positive', {'special': 'главная'}]],
    ]

def main(data, user_info, page=1):
    message = ''
    attachment = ''
    keyboard = ''
    if page == 1:
        message, attachment, keyboard = get_an_answer_1(data,user_info)
    elif page == 2:
        message, attachment, keyboard = get_an_answer_2(data,user_info)
    elif page == 3:
        message, attachment, keyboard = get_an_answer_3(data,user_info)
    return message, attachment, keyboard

#=================================================================

def get_an_answer_1(data, user_info):
    weeks = db.get_names_schedule(user_info)
    if len(weeks) == 1:
        week_id = db.get_week_id(user_info, weeks[0])
        db.set_data_buffer(user_info['vk_id'], week_id, '')
        db.set_multiline_status( 2, user_info, 'schedule;3')
        return ('Выбери день недели:','', createList(days, end_button=['Назад','negative']))

    db.set_multiline_status( 2, user_info, 'schedule;2')
    return ('Выбери неделю:','', createButtons(get_weeks(user_info)))

#================================================================

def get_an_answer_2(data, user_info):
    special = get_element(data, 'special')
    names_schedule = db.get_names_schedule(user_info)

    if special == 'главная':
        return db.go_main(user_info)

    if data['body'] in names_schedule:
        week_id = db.get_week_id(user_info, data['body'])
        db.set_data_buffer(user_info['vk_id'], week_id, '')
        db.set_multiline_status( 2, user_info, 'schedule;3')
        return ('Выбери день недели:','', createList(days, end_button=['Назад','negative']))
    return('Такой недели нет', '', createButtons(get_weeks(user_info)))

#=================================================================

def get_an_answer_3(data, user_info):
    special = get_element(data, 'special')

    if special == 'назад':
        weeks = db.get_names_schedule(user_info)
        if len(weeks) == 1:
            return db.go_main(user_info)

        db.find_data_buffer(user_info['vk_id'])
        return get_an_answer_1(data, user_info)

    ans_text = 'Такого дня нет'
    if data['body'] in days:
        week_id = db.find_data_buffer(user_info['vk_id'])[1]
        text = db.get_day_info(week_id, data['body'], user_info)
        db.set_data_buffer(user_info['vk_id'], week_id, '')
        if text != False:
            ans_text = 'Вот расписание на этот день:\n' + text
        else: ans_text = 'На этот день ещё не было заполнено расписание.\nПопросите администратора вашей группы заняться этим'

    return (ans_text,'', createList(days, end_button=['Назад','negative']))











##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/yes_no.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "payload": "{\"special\": \"да\"}",
          "label": "Да"
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "payload": "{\"special\": \"нет\"}",
          "label": "Нет"
        },
        "color": "negative"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/1_main_page.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Создать"
        },
        "color": "primary"
      },

        {
        "action": {
          "type": "text",
          "label": "Присоединиться"
        },
        "color": "primary"

      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/go_back.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "payload": "{\"special\": \"назад\"}",
          "label": "Назад"
        },
        "color": "negative"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/homework_button.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Актуальное дз"
        },
        "color": "primary"
      },
      {
        "action": {
          "type": "text",
          "label": "Архив дз"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/3_admin_panel.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Изменить название группы"
        },
        "color": "primary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Добавить дз"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Токен"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Добавить предмет"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Удалить предмет"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Изменить преподавателей"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Изменить расписание"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/admin-main.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Панель администратора"
        },
        "color": "primary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/helpbuttons.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "ДЗ"
        },
        "color": "positive"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Преподаватели"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Расписание"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Рассылка"
        },
        "color": "primary"
      },
      {
        "action": {
        "type": "text",
        "label": "Выйти из группы"
        },
        "color": "negative"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/main_buttons.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/3_auto_sender.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "Администраторам"
        },
        "color": "primary"
      },
      {
        "action": {
          "type": "text",
          "label": "Всем"
        },
        "color": "secondary"
      }
    ],
    [
        {
        "action": {
          "type": "text",
          "label": "Главная"
        },
        "color": "positive"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/cancel.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "payload": "{\"special\": \"отмена\"}",
          "label": "Отмена"
        },
        "color": "negative"
      }
    ]
  ]
}







##############################

/home/user/hello/dev/botaybot/2.1.2/commands/jsons/3_main_page.json

------------------------------

{
  "one_time": true,
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "ДЗ"
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "Панель администратора"
        },
        "color": "primary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Расписание"
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "Преподаватели"
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "Рассылка"
        },
        "color": "secondary"
      },
      {
        "action": {
        "type": "text",
        "label": "Выйти из группы"
        },
        "color": "negative"
      }
    ]
  ]
}










##############################

/home/user/hello/dev/botaybot/2.1.2/api/user_class.py

------------------------------

class User:
    def __init__(self,
                password, vk_id,
                forbidden_tasks, allowed_files):
        self.password = password
        self.vk_id = vk_id
        self.allowed_files = allowed_files

    def fix_allowed_files(self):
        import os
        files_list = []
        if len(self.allowed_files) != 0:
            if self.allowed_files[0] == '*':
                for address, dirs, files in os.walk('/home/4LcHEM1ST/mysite'):
                    for file in files:
                        file_name = os.path.join(address, file)
                        files_list += [file_name]
                self.allowed_files = files_list
            else:
                self.allowed_files = files_list + allowed_files

    def task_permission(self, task_folder, task_name):
        for i in foribidden_tasks:
            pair = {'task_folder': i.split('/')[0],
                    'task_name': i.split('/')[1]}
            if task_folder == pair['task_folder'] and task_name == pair['task_name']:
                return False
        return True

users = {
    'alf': User('1234',
            228179762,
            [], ['*'],
                ),
    'victor': User('001234',
            195823782,
            [], ['*'],
                ),
    }












##############################

/home/user/hello/dev/botaybot/2.1.2/api/_list.py

------------------------------

from api.settings import *
import json
import requests

def test(name):
    def _test(data):
        return data
    return locals()[name]

def host(name):
    def reload_host(data):
        response = requests.post(
            f'https://{host}/api/v0/user/{username}/webapps/{domain_name}/reload/',
            headers={'Authorization': f'Token {token}'}
        )
        return {'status': 'OK'}

    def update_backup():
        return {'status': 'OK'}

    return locals()[name]

def bot(name):
    def technical_break(data):
        import message_handler
        message_handler.pls_wait = not message_handler.pls_wait
        return {'status': 'OK', 'answer': message_handler.pls_wait}

    return locals()[name]









##############################

/home/user/hello/dev/botaybot/2.1.2/api/files_sender.py

------------------------------

import requests
import threading
from queue import Queue
from time import sleep
import os

#=========================Globals=========================

files_list = Queue()

#===================Thread=Functions========================

def create_files_list(username):
    import os
    files_list = globals()['files_list']
    for address, dirs, files in os.walk(f'./users/{username}'):
        for file in files:
            filename_sys = os.path.join(address, file)
            filename_serv = os.path.join(address[len('./server_files') + 1:], file)
            files_list.put({'sys': filename_sys, 'serv': filename_serv})

#=======================Main==============================


def main(username):
    creator = threading.Thread(target=create_files_list, args=(username,))
    creator.start()

    for repeats in range(5):
        thread = Sender(files_list)
        thread.setDaemon(True)
        thread.start()

    creator.join()
    files_list.join()
    return












##############################

/home/user/hello/dev/botaybot/2.1.2/api/handler.py

------------------------------

from api.user_class import users
import os
#----------------------------------------------

home_path = '/home/4LcHEM1ST/mysite/api/users/'

#----------------------------------------------

def fix_headers(data):
    headers = data['headers']
    answer = {}
    for pair in headers:
        answer.update({pair[0]: pair[1]})
    data.update({'headers': answer})

#----------------------------------------------

def login(data):
    headers = data['headers']
    if headers['User'] in users.keys():
        if headers['Password'] == users[headers['User']].password:
            return True
    return False

#==================================================

def api(data):
    fix_headers(data)
    if login(data):
        answer = {'connection_status': True}

        if 'task' in data.keys():
            from api import _list
            try:
                answer.update(
                    getattr(_list, data['task_folder'])(
                        data['task'])(data)
                        )
            except:
                answer.update(
                    {'task_status': 'None'})
        else:
            answer.update({'task_status': 'TEST REQUEST'})
        return answer

    return {'connection_status': False}

#==================================================

def upload(data):
    from werkzeug.utils import secure_filename

    def check_filename(name):
        forbidden_steps = ['../']
        forbidden_step_pos = None
        while forbidden_step_pos != -1:
            for x in forbidden_steps:
                forbidden_step_pos = name.find(x)
                if forbidden_step_pos != -1:
                    name = name[0:forbidden_step_pos] + name[forbidden_step_pos + len(x):]
        return name


    def save_file(data, _filename, _file):
        username = data['headers']['User']
        users_path = home_path + f'{username}'
        path_r_pos = _filename.rfind(r'/')
        if path_r_pos != -1:
            _dir = os.path.join(users_path, _filename[0:path_r_pos])
            if not os.path.exists(_dir):
                os.makedirs(_dir)
        file.save(os.path.join(users_path, _filename))

    fix_headers(data)
    if login(data):
        answer = {'connection_status': True}
        if data['method'] == 'POST':
            status = {}
            for filename in data['files'].keys():
                try:
                    file = data['files'][filename]
                    filename = check_filename(filename)
                    save_file(data, filename, file)
                    status.update({secure_filename(filename): 'OK'})
                except:
                    status.update({secure_filename(filename): 'ERROR'})

            answer.update({'files_status': status})
            return answer

        if data['method'] == 'GET':
            def create_files_list(username):
                _files_list = {}
                for address, dirs, files in os.walk(f'./users/{username}'):
                    for file in files:#filter(lambda x: x.endswith('.py'), files):
                        filename_sys = os.path.join(address, file)
                        filename_client = os.path.join(address[len(f'./users/{username}') + 1:], file)
                        _files_list.update({filename_client: open(filename_sys, 'rb')})
                return _files_list

            files_list = create_files_list(data['headers']['User'])
            return files_list

    return {'connection_status': False}

#==============================================================

def download(data):
    fix_headers(data)
    if login(data):
        answer = {'connection_status': True}
        username = data['headers']['User']
        if not os.path.exists(os.path.join(home_path, username, data['path_name'])):
            answer.update({'files_list': [], 'dirs_list': []})
            return answer

        if os.path.isfile(data['path_name']):
            filename = data['path_file']
            sys_name = os.path.join(home_path, username, filename)
            client_name = filename
            return {'file': {'sys': sys_name, 'client': client_name}}

        else:
            files_list, dirs_list = [], []
            scan_path = os.path.join(home_path, username)
            objects_list = os.listdir(scan_path)
            for _object in objects_list:
                if os.path.isfile(_object):
                    files_list += [_object]
                else:
                    dirs_list += [_object]

            answer.update({'files_list': files_list,
                        'dirs_list': dirs_list })
            return answer

    return {'connection_status': False}

#==============================================================

if __name__ == '__main__':
    from user_class import users
    print(users)











##############################

/home/user/hello/dev/botaybot/2.1.2/api/settings.py

------------------------------

username = '4LcHEM1ST'
token = '5e0bb61d97a89e2a85d9e4080c11312a2ce43d53'
host = 'www.pythonanywhere.com'
domain_name = '4LcHEM1ST.pythonanywhere.com'









##############################

/home/user/hello/dev/botaybot/2.1.2/api/users/alf/tester.py

------------------------------

print('Ok')










##############################

1234567890end